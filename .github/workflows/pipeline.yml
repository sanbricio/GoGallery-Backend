name: Go CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build
        run: go build -v ./...

      - name: Check build success
        if: ${{ failure() }}
        run: |
          echo "Build failed. Aborting pipeline."
          exit 1

      - name: Run Tests
        run: go test -v ./...

      - name: Check tests
        if: ${{ failure() }}
        run: |
          echo "Tests failed. Skipping version generation."
          exit 1

  release-versioning:
    if: startsWith(github.ref, 'refs/heads/release/')
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch: $BRANCH_NAME"
          if [[ "$BRANCH_NAME" =~ ^release/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "Not a valid release branch. Exiting."
            exit 1
          fi

      - name: Generate version in the code
        run: ./scripts/generate-version.sh

      - name: Commit version updates
        run: |
          git config user.name "CI Go Gallery Bot"
          git config user.email "gogalleryteam@gmail.com"
          git add .
          git commit -m "Update version to ${VERSION} [skip ci]"
          git push origin HEAD:${GITHUB_REF#refs/heads/}

      - name: Merge to main branch
        run: |
          git checkout main
          git merge "${GITHUB_REF#refs/heads/}"
          git push origin main

      - name: Generate version tag
        run: |
          VERSION_TAG=v${{ env.VERSION }}
          git tag -a "$VERSION_TAG" -m "Release version $VERSION_TAG"
          git push origin "$VERSION_TAG"
